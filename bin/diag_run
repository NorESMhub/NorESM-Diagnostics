#!/bin/bash
# Configuring and running diagnostics packages on NIRD
# Written by Johan Liakka (latest update is the version number)
# johan.liakka@nersc.no

VERSION=2.0
BIN_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
ROOT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )"
ETC_DIR=$ROOT_DIR/etc
ROOT_FOLD=$(basename $ROOT_DIR)

## Initial values
THIS_SCRIPT_NAME=`basename "$0"`
DIAG_PATH=/scratch/$USER/$ROOT_FOLD
USER_MODEL=none
CASE1=none
SYR1=-1
EYR1=-1
CASE2=none
SYR2=-1
EYR2=-1
WEB_PATH=/projects/NS2345K/www/$ROOT_FOLD
HISTORY_PATH1=/projects/NS2345K/noresm/cases
HISTORY_PATH2=/projects/NS2345K/noresm/cases
RUN_DIAG=1
TYPE_OF_DIAG=both

## Welcome message
echo "-------------------------------------------------"
echo "Program:"
echo "${BIN_DIR}/${THIS_SCRIPT_NAME}"
echo "Version: $VERSION"
echo "-------------------------------------------------"

## Check all flags
if [ $# -eq 0 ]; then
    echo "Short description:"
    echo "${THIS_SCRIPT_NAME} is used to configure and run the NorESM diagnostic packages."
    echo " "
    echo "Basic usage:"
    echo "${THIS_SCRIPT_NAME} -m [model] -c [test case name] -s [test case start yr] -e [test case end yr] # Run model-obs diagnostics"
    echo "${THIS_SCRIPT_NAME} -m [model] -c [test case name] -s [test case start yr] -e [test case end yr] -c2 [cntl case name] -s2 [cntl case start yr] -e2 [cntl case end yr] # Run model1-model2 diagnostics"
    echo "nohup ${BIN_DIR}/${THIS_SCRIPT_NAME} -m [model] -c [test case name] -s [test case start yr] -e [test case end yr] &> out & # Run model-obs diagnostics in the background with nohup"
    echo " "
    echo "Command-line options:"
    echo "-m, --model=MODEL                             Specify the diagnostics package (REQUIRED)."
    echo "                                              Valid arguments:"
    echo "                                                cam  : atmospheric package (AMWG)"
    echo "                                                clm  : land package (LMWG)"
    echo "                                                cice : sea-ice package"
    echo "                                                all  : configure all available packages (currently cam, clm and cice; micom and pop are still in development)."
    echo "-c, -c1, --case=CASE1, --case1=CASE1          Test case simulation (OPTIONAL)."
    echo "-s, -s1, --start_yr=SYR1, --start_yr1=SYR1    Start year of test case climatology (OPTIONAL)."
    echo "-e, -e1, --end_yr=EYR1, --end_yr1=EYR1        End year of test case climatology (OPTIONAL)."
    echo "-c2, --case2=CASE2                            Control case simulation (OPTIONAL)."
    echo "-s2, --start_yr2=SYR2                         Start year of control case climatology (OPTIONAL)."
    echo "-e2, --end_yr2=EYR2                           End year of control case climatology (OPTIONAL)."
    echo "-i, -i1, --input-dir=DIR, --input-dir1=DIR    Specify the directory where the test case history files are located (OPTIONAL)."
    echo "                                              Default is --input-dir=/projects/NS2345K/noresm/cases"
    echo "-i2, --input-dir2=DIR                         Specify the directory where the control case history files are located (OPTIONAL)."
    echo "                                              Default is --input-dir=/projects/NS2345K/noresm/cases"
    echo "-o, --output-dir=DIR                          Specify the directory where the package(s) should be installed (OPTIONAL)."
    echo "                                              Default is --output-dir=/scratch/$USER/noresm_diagnostics"
    echo "-p, --passive-mode                            Run the script in passive mode: the diagnostic script will be configured but not executed (OPTIONAL)."
    echo "-t, --type=TYPE                               Specify climatology or time series diagnostics (OPTIONAL): valid options are --type=climo and --type=time_series."
    echo "                                              Default is to run both. Note that the time series are computed over the entire simulation."
    echo "-w, --web-dir=DIR                             Specify the directory where the html should be published (OPTIONAL)."
    echo "                                              Default is --web-dir=/projects/NS2345K/www/noresm_diagnostics"
    echo " "
    echo "Examples:"
    echo "${THIS_SCRIPT_NAME} -m all -c N1850_f19_tn11_exp1 -s 21 -e 50 # model-obs diagnostics of N1850_f19_tn11_exp1 for all (available) components."
    echo "${THIS_SCRIPT_NAME} -m cam -c N1850_f19_tn11_exp1 -s 21 -e 50 -w /path/to/my/html # model-obs diagnostics for CAM, publish the html in /path/to/my/html."
    echo "${THIS_SCRIPT_NAME} -m cice -c N1850_f19_tn11_exp1 -s 21 -e 50 -p # configure (but do not run) model-obs diagnostics for CICE."
    echo "${THIS_SCRIPT_NAME} -m clm -c N1850_f19_tn11_exp1 -s 21 -e 50 -i /input/directory1 -c2 N1850_f19_tn11_exp2 -s2 21 -e2 50 -i2 /input/directory2 # model1-model2 diagnostics for CLM with user-specified history file directories"
    echo "${THIS_SCRIPT_NAME} -m clm -c N1850_f19_tn11_exp1 -s 21 -e 50 -t climo # model-obs climatology diagnostics (no time series) for CLM:"
    echo "${THIS_SCRIPT_NAME} -m cam -o /my/dir # install CAM diagnostics in /my/dir with minimal configuration."
    echo " "
    exit 0
else
    while test $# -gt 0; do
	case "$1" in
            -c | -c1)
		shift
                if test $# -gt 0; then
                    CASE1=$1
                else
                    echo "ERROR: no test case specified (-c, -c1, --case, --case1)"
		    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                shift
                ;;
            --case=* | --case1=*)
		CASE1=`echo $1 | sed -e 's/^[^=]*=//g'`
                shift
                ;;
            -c2)
		shift
                if test $# -gt 0; then
                    CASE2=$1
                else
                    echo "ERROR: no cntl case specified (-c2, --case2)"
		    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                shift
                ;;
            --case2=*)
		CASE2=`echo $1 | sed -e 's/^[^=]*=//g'`
                shift
                ;;
            -s | -s1)
		shift
                if test $# -gt 0; then
                    SYR1=$1
                else
                    echo "ERROR: no start yr of test case specified (-s, -s1, --start_yr, --start_yr1)"
		    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                shift
                ;;
            --start_yr=* | --start_yr1=*)
		SYR1=`echo $1 | sed -e 's/^[^=]*=//g'`
                shift
                ;;
	    -s2)
		shift
                if test $# -gt 0; then
                    SYR2=$1
                else
                    echo "ERROR: no start yr of cntl case specified (-s2, --start_yr2)"
		    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                shift
                ;;
            --start_yr2=*)
		SYR2=`echo $1 | sed -e 's/^[^=]*=//g'`
                shift
                ;;
            -e | -e1)
		shift
                if test $# -gt 0; then
                    EYR1=$1
                else
                    echo "ERROR: no end yr of test case specified (-e, -e1, --end_yr, --end_yr1)"
		    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                shift
                ;;
            --end_yr=* | --end_yr1=*)
		EYR1=`echo $1 | sed -e 's/^[^=]*=//g'`
                shift
                ;;
	    -e2)
		shift
                if test $# -gt 0; then
                    EYR2=$1
                else
                    echo "ERROR: no end yr of cntl case specified (-e2, --end_yr2)"
		    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                shift
                ;;
            --end_yr2=*)
		EYR2=`echo $1 | sed -e 's/^[^=]*=//g'`
                shift
                ;;
	    -i | -i1)
		shift
                if test $# -gt 0; then
                    HISTORY_PATH1=$1
                else
                    echo "ERROR: no input directory specified (-i, --input-dir)"
		    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                shift
                ;;
            --input-dir* | --input-dir1*)
		HISTORY_PATH1=`echo $1 | sed -e 's/^[^=]*=//g'`
                shift
                ;;
    	    -i2)
		shift
                if test $# -gt 0; then
                    HISTORY_PATH2=$1
                else
                    echo "ERROR: no input directory specified (-i2, --input-dir2)"
		    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                shift
                ;;
            --input-dir2*)
		HISTORY_PATH2=`echo $1 | sed -e 's/^[^=]*=//g'`
                shift
                ;;
            -m)
		shift
                if test $# -gt 0; then
                    USER_MODEL=$1
                else
                    echo "ERROR: no model specified (-m, --model)"
     		    echo "Valid options: cam, clm, cice, all"
		    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                shift
                ;;
            --model*)
		USER_MODEL=`echo $1 | sed -e 's/^[^=]*=//g'`
                shift
                ;;
	    -p|--passive-mode)
		RUN_DIAG=0
		final_message="RUNNING IN PASSIVE MODE: EXITING"
		shift
                ;;
            -o)
		shift
                if test $# -gt 0; then
                    DIAG_PATH=$1
                else
                    echo "ERROR: no output directory specified (-o, --output-dir)"
    		    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                shift
                ;;
            --output-dir*)
		DIAG_PATH=`echo $1 | sed -e 's/^[^=]*=//g'`
                shift
                ;;
	    -t)
		shift
                if test $# -gt 0; then
                    TYPE_OF_DIAG=$1
                else
                    echo "ERROR: no type specified (-t, --type)"
     		    echo "Valid options: climo and time_series"
		    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                shift
                ;;
            --type*)
		TYPE_OF_DIAG=`echo $1 | sed -e 's/^[^=]*=//g'`
                shift
                ;;
            -w)
		shift
                if test $# -gt 0; then
                    WEB_PATH=$1
                else
                    echo "ERROR: no web directory specified (-w, --web-dir)"
    		    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                shift
                ;;
            --web-dir*)
		WEB_PATH=`echo $1 | sed -e 's/^[^=]*=//g'`
                shift
                ;;
            *)
                echo "ERROR: option $1 not allowed."
                echo "Run $BIN_DIR/$THIS_SCRIPT_NAME to see available options"
                echo "*** EXITING THE SCRIPT"
		exit 1
                ;;
	esac
    done
fi

## Security checks
if [[ ${DIAG_PATH:0:1} != "/" ]]; then
    echo "ERROR: ${DIAG_PATH} is not a directory. Please give the full path."
    echo "*** EXITING THE SCRIPT"
    exit 1
fi

if [ $TYPE_OF_DIAG != both ] && [ $TYPE_OF_DIAG != climo ] && [ $TYPE_OF_DIAG != time_series ]; then
    echo "ERROR: ${TYPE_OF_DIAG} is not an option for flag -t. Valid options are climo and time_series."
    echo "*** EXITING THE SCRIPT"
    exit 1
fi

CAM_DIAG_DIR="${ROOT_DIR}/CAM_DIAG/amwg_diag_20140207"
CLM_DIAG_DIR="${ROOT_DIR}/CLM_DIAG/lnd_diag4.2.25"
CICE_DIAG_DIR="${ROOT_DIR}/CICE_DIAG/ice_diag_20120323"
CAM_DIAG_FILE="amwg_template.csh"
CLM_DIAG_FILE="lnd_template.csh"
CICE_DIAG_FILE="ice_diag_template.csh"

MODELS=(cam clm cice)
MODELS_CAPS=(CAM CLM CICE)
DIAG_DIRS=($CAM_DIAG_DIR $CLM_DIAG_DIR $CICE_DIAG_DIR)
DIAG_FILES=($CAM_DIAG_FILE $CLM_DIAG_FILE $CICE_DIAG_FILE)
TEST_CASE_NAMES=(test_casename caseid_1 CASE_TO_CONT)
TEST_FIRST_YR_NAMES=(test_first_yr clim_first_yr_1 FIRST_YR_CLIMO1)
TEST_NYRS_NAMES=(test_nyrs clim_num_yrs_1 NYRS_CLIMO1)
DIAG_DIR_NAMES=(diag_dir PTMPDIR SCRIPT_HOME)
CNTL_NAMES=(CNTL CNTL CNTL)
CNTL_CASE_NAMES=(cntl_casename caseid_2 CASE_TO_DIFF)
CNTL_FIRST_YR_NAMES=(cntl_first_yr clim_first_yr_2 FIRST_YR_CLIMO2)
CNTL_NYRS_NAMES=(cntl_nyrs clim_num_yrs_2 NYRS_CLIMO2)
WEB_DIR_NAMES=(publish_html_root publish_html_root publish_html_root)
INPUT_DIR_NAMES1=(test_path_history_root SOURCE_1 DATA_ROOT1)
INPUT_DIR_NAMES2=(cntl_path_history_root SOURCE_2 DATA_ROOT2)
DIAG_RUNTIMES=(null null null)
runtime_s_tot=0

if [ "$USER_MODEL" == "micom" ] || [ "$USER_MODEL" == "pop" ]; then
    echo "$USER_MODEL diagnostics is still in development. Coming soon ..."
    echo "*** EXITING THE SCRIPT"
    exit
fi

if [ "$USER_MODEL" == "clm2" ]; then
    USER_MODEL=clm
fi

if [ "$USER_MODEL" == "cam2" ]; then
    USER_MODEL=cam
fi

if [ "$USER_MODEL" == "cam" ]; then
    RUN_MODELS=(1 0 0)
elif [ "$USER_MODEL" == "clm" ] || [ "$USER_MODEL" == "clm2" ]; then
    RUN_MODELS=(0 1 0)
elif [ "$USER_MODEL" == "cice" ]; then
    RUN_MODELS=(0 0 1)
elif [ "$USER_MODEL" == "all" ]; then
    RUN_MODELS=(1 1 1)
elif [ "$USER_MODEL" == "cam,clm" ] || [ "$USER_MODEL" == "clm,cam" ]; then
    RUN_MODELS=(1 1 0)
elif [ "$USER_MODEL" == "cam,cice" ] || [ "$USER_MODEL" == "cice,cam" ]; then
    RUN_MODELS=(1 0 1)
elif [ "$USER_MODEL" == "clm,cice" ] || [ "$USER_MODEL" == "cice,clm" ]; then
    RUN_MODELS=(0 1 1)
else
    echo "ERROR: please specify a model (-m cam, -m clm, -m cice or -m all):"
    echo "*** EXITING THE SCRIPT"
    exit 1
fi

icount=0
for model_flag in "${RUN_MODELS[@]}"
do
    if [ $model_flag -gt 0 ]; then

	# START TIMER
	diag_start_time=`date +%s`
	
	# READ ARRAYS
	MODEL=${MODELS[icount]}
	MODEL_CAPS=${MODELS_CAPS[icount]}
	DIAG_DIR=${DIAG_DIRS[icount]}
	DIAG_FILE=${DIAG_FILES[icount]}
	MODEL_DIAG_CAPS=${MODEL_CAPS}_DIAG
	TEST_CASE_NAME=${TEST_CASE_NAMES[icount]}
	TEST_FIRST_YR_NAME=${TEST_FIRST_YR_NAMES[icount]}
	TEST_NYRS_NAME=${TEST_NYRS_NAMES[icount]}
	DIAG_DIR_NAME=${DIAG_DIR_NAMES[icount]}
	CNTL_NAME=${CNTL_NAMES[icount]}
	CNTL_CASE_NAME=${CNTL_CASE_NAMES[icount]}
	CNTL_FIRST_YR_NAME=${CNTL_FIRST_YR_NAMES[icount]}
	CNTL_NYRS_NAME=${CNTL_NYRS_NAMES[icount]}
	WEB_DIR_NAME=${WEB_DIR_NAMES[icount]}
	INPUT_DIR_NAME1=${INPUT_DIR_NAMES1[icount]}
	INPUT_DIR_NAME2=${INPUT_DIR_NAMES2[icount]}
		
	# CREATE USER DIAGNOSTICS DIRECTORY
	if [ ! -d $DIAG_PATH/$MODEL_DIAG_CAPS ]; then
	    mkdir -p $DIAG_PATH/$MODEL_DIAG_CAPS
	    if [ $? -ne 0 ]; then
		echo "ERROR: creating directory ${DIAG_PATH}/${MODEL_DIAG_CAPS} failed"
		echo "*** EXITING THE SCRIPT"
		exit 1
	    fi
	fi

	# COPY THE DIAGNOSTICS SCRIPT
	cp $DIAG_DIR/$DIAG_FILE $DIAG_PATH/$MODEL_DIAG_CAPS
	if [ $? -ne 0 ]; then
	    echo "ERROR: copying $DIAG_DIR/$DIAG_FILE failed"
            echo "*** EXITING THE SCRIPT"
	    exit 1
	fi

	# COPY config.log AND required_vars
	cp $ETC_DIR/config_log_template $DIAG_PATH/$MODEL_DIAG_CAPS/config.log
	if [ $? -ne 0 ]; then
	    echo "ERROR: copying $ETC_DIR/config_log_template failed"
            echo "*** EXITING THE SCRIPT"
	    exit 1
	fi
	cp $ETC_DIR/required_vars_${MODEL_CAPS} $DIAG_PATH/$MODEL_DIAG_CAPS/required_vars
	if [ $? -ne 0 ]; then
	    echo "ERROR: copying $ETC_DIR/required_vars_${MODEL_CAPS} failed"
            echo "*** EXITING THE SCRIPT"
	    exit 1
	fi

	# ENTER THE DIAGNOSTICS DIRECTORY
	cd $DIAG_PATH/$MODEL_DIAG_CAPS
	if [ $? -ne 0 ]; then
	    echo "ERROR: could not access $DIAG_PATH/$MODEL_DIAG_CAPS"
            echo "*** EXITING THE SCRIPT"
	    exit 1
	fi
	
	# MODIFY config.log WITH NAMES AND DATES
	cdate=`date`
	if /usr/bin/grep -q MODEL_DIAG config.log
	then
  	   /usr/bin/sed -i "s/MODEL_DIAG/${MODEL_DIAG_CAPS}/g" config.log
	else
	    echo "ERROR: modifying $DIAG_PATH/config.log with $MODEL_DIAG_CAPS failed"
            echo "*** EXITING THE SCRIPT"
	    exit 1
	fi
	if /usr/bin/grep -q diag_script config.log
	then
	    /usr/bin/sed -i "s/diag_script/${DIAG_FILE}/g" config.log
	else
	    echo "ERROR: modifying $DIAG_PATH/config.log with ${DIAG_FILE} failed"
            echo "*** EXITING THE SCRIPT"
	    exit 1
	fi

	if /usr/bin/grep -q current_date config.log
	then
	    /usr/bin/sed -i "s/current_date/${cdate}/g" config.log
	else
	    echo "ERROR: modifying $DIAG_PATH/config.log with date failed"
	    echo "*** EXITING THE SCRIPT"
	    exit 1
	fi
	if /usr/bin/grep -q script_name_path config.log
	then
	    /usr/bin/sed -i "s+script_name_path+${BIN_DIR}/${THIS_SCRIPT_NAME}+g" config.log
	else
	    echo "ERROR: modifying $DIAG_PATH/config.log with script_name failed"
            echo "*** EXITING THE SCRIPT"
	    exit 1
	fi
	if /usr/bin/grep -q script_name config.log
	then
	    /usr/bin/sed -i "s/script_name/${THIS_SCRIPT_NAME}/g" config.log
	else
	    echo "ERROR: modifying $DIAG_PATH/config.log with date failed"
            echo "*** EXITING THE SCRIPT"
	    exit 1
	fi
	
	# CHANGE THE DIAG DIRECTORY IN DIAGNOSTICS SCRIPT
	echo "-CHANGING DIAGNOSTICS DIRECTORY to ${DIAG_PATH}/${MODEL_DIAG_CAPS} in $DIAG_FILE"
	if /usr/bin/grep -q /path/to/your/diagnostics $DIAG_FILE
	then
	    /usr/bin/sed -i "s+/path/to/your/diagnostics+${DIAG_PATH}/${MODEL_DIAG_CAPS}+g" $DIAG_FILE
	else
	    echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new DIAG_PATH failed"
            echo "*** EXITING THE SCRIPT"
	    exit 1
	fi
	echo "# DIAGNOSTICS DIRECTORY:" >> config.log
	echo "${DIAG_DIR_NAME} = ${DIAG_PATH}/${MODEL_DIAG_CAPS}" >> config.log
	if /usr/bin/grep -q $DIAG_DIR_NAME required_vars
	then
	    /usr/bin/sed -i "/${DIAG_DIR_NAME}/d" required_vars
	else
	    echo "ERROR: deleting $DIAG_DIR_NAME from required_vars failed"
            echo "*** EXITING THE SCRIPT"
	    exit 1
	fi
	
	# CHANGE THE ROOT DIRECTORY INCLUDING ALL CODE AND DATA
	echo "-CHANGING ROOT DIRECTORY FOR CODE AND DATA to ${DIAG_DIR} in $DIAG_FILE"
	if /usr/bin/grep -q /path/to/code/and/data $DIAG_FILE
	then
	    /usr/bin/sed -i "s+/path/to/code/and/data+${DIAG_DIR}+g" $DIAG_FILE
	else
	    echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new DIAG_DIR failed"
            echo "*** EXITING THE SCRIPT"
	    exit 1
	fi
	echo "# ROOT DIRECTORY TO CODE AND DATA:" >> config.log
	echo "DIAG_HOME = ${DIAG_DIR}" >> config.log
	if /usr/bin/grep -q DIAG_HOME required_vars
	then
	    /usr/bin/sed -i "/DIAG_HOME/d" required_vars
	else
	    echo "ERROR: deleting DIAG_HOME from required_vars failed"
            echo "*** EXITING THE SCRIPT"
	    exit 1
	fi

	# CHANGE INPUT DIRECTORY 1
	echo "-CHANGING INPUT DIR 1 to $HISTORY_PATH1 in $DIAG_FILE"
	if /usr/bin/grep -q /path/to/test_case/history $DIAG_FILE
	then
    	    /usr/bin/sed -i "s+/path/to/test_case/history+${HISTORY_PATH1}+g" $DIAG_FILE
	else
	    echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_PATH/$DIAG_FILE with new HISTORY_PATH1 failed"
	    echo "*** EXITING THE SCRIPT"
	    exit 1
	fi
	echo "# TEST CASE SIMULATION DIRECTORY:" >> config.log
	echo "${INPUT_DIR_NAME1} = $HISTORY_PATH1" >> config.log
	if /usr/bin/grep -q $INPUT_DIR_NAME1 required_vars
	then
	    /usr/bin/sed -i "/${INPUT_DIR_NAME1}/d" required_vars
	else
	    echo "ERROR: deleting ${INPUT_DIR_NAME1} from required_vars failed"
            echo "*** EXITING THE SCRIPT"
	    exit 1
	fi

	# CHANGE INPUT DIRECTORY 2
	if [ $CASE2 != none ]; then
    	    echo "-CHANGING INPUT DIR 2 to $HISTORY_PATH2 in $DIAG_FILE"
	    if /usr/bin/grep -q /path/to/cntl_case/history $DIAG_FILE
	    then
    		/usr/bin/sed -i "s+/path/to/cntl_case/history+${HISTORY_PATH2}+g" $DIAG_FILE
	    else
		echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_PATH/$DIAG_FILE with new HISTORY_PATH2 failed"
		echo "*** EXITING THE SCRIPT"
		exit 1
	    fi
	    echo "# CONTROL CASE SIMULATION DIRECTORY:" >> config.log
	    echo "${INPUT_DIR_NAME2} = $HISTORY_PATH2" >> config.log
	    if /usr/bin/grep -q $INPUT_DIR_NAME2 required_vars
	    then
		/usr/bin/sed -i "/${INPUT_DIR_NAME2}/d" required_vars
	    else
		echo "ERROR: deleting ${INPUT_DIR_NAME2} from required_vars failed"
		echo "*** EXITING THE SCRIPT"
		exit 1
	    fi
	fi

	# CHANGE WEB DIR IN DIAGNOSTICS SCRIPT
	echo "-CHANGING publish_html_root to $WEB_PATH in $DIAG_FILE"
	if /usr/bin/grep -q /path/to/html/directory $DIAG_FILE
	then
    	    /usr/bin/sed -i "s+/path/to/html/directory+${WEB_PATH}+g" $DIAG_FILE
	else
	    echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new WEB_PATH failed"
	    echo "*** EXITING THE SCRIPT"
	    exit 1
	fi
	echo "# HTML DIRECTORY:" >> config.log
	echo "${WEB_DIR_NAME} = $WEB_PATH" >> config.log
	if /usr/bin/grep -q $WEB_DIR_NAME required_vars
	then
	    /usr/bin/sed -i "/${WEB_DIR_NAME}/d" required_vars
	else
	    echo "ERROR: deleting ${WEB_DIR_NAME} from required_vars failed"
	    echo "*** EXITING THE SCRIPT"
	    exit 1
	fi
	
	# CHANGE CASE1 IN DIAGNOSTICS SCRIPT
   	if [ $CASE1 != none ]; then
      	    echo "-CHANGING TEST CASE to $CASE1 in $DIAG_FILE"
	    EXPPATH=$HISTORY_PATH1/$CASE1
	    if [ ! -d "$EXPPATH" ]; then
		echo "WARNING: CASE=${CASE1} does not exist in ${HISTORY_PATH1}. Please modify the case name and/or path to history files in the diagnostic script."
		RUN_DIAG=0
		final_message="CANNOT RUN ${DIAG_FILE} (see previous warning(s))."
	    fi
	    if /usr/bin/grep -q your_test_simulation $DIAG_FILE
	    then
		/usr/bin/sed -i "s+your_test_simulation+${CASE1}+g" $DIAG_FILE
	    else
		echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new TEST CASE failed"
		echo "*** EXITING THE SCRIPT"
		exit 1
	    fi
	    echo "# TEST SIMULATION NAME:" >> config.log
	    echo "${TEST_CASE_NAME} = ${CASE1}" >> config.log
	    if /usr/bin/grep -q $TEST_CASE_NAME required_vars
	    then
		/usr/bin/sed -i "/${TEST_CASE_NAME}/d" required_vars
	    else
		echo "ERROR: deleting ${TEST_CASE_NAME} from required_vars failed"
		echo "*** EXITING THE SCRIPT"
		exit 1
	    fi
	    # SET CNTL=OBS IF CASE2 IS NOT PROVIDED
	    if [ $CASE2 == none ]; then
       		echo "-CHANGING CNTL TO OBS in $DIAG_FILE"
		if /usr/bin/grep -q type_of_control_case $DIAG_FILE
		then
		    /usr/bin/sed -i "s+type_of_control_case+OBS+g" $DIAG_FILE
		else
		    echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new type_of_control_case failed"
		    echo "*** EXITING THE SCRIPT"
		    exit 1
		fi
		echo "# TYPE OF CONTROL CASE:" >> config.log
		echo "${CNTL_NAME} = OBS" >> config.log
		if /usr/bin/grep -q $CNTL_NAME required_vars
		then
		    /usr/bin/sed -i "/${CNTL_NAME}/d" required_vars
		else
		    echo "ERROR: deleting ${CNTL_NAME} from required_vars failed"
		    echo "*** EXITING THE SCRIPT"
		    exit 1
		fi
		if /usr/bin/grep -q $CNTL_CASE_NAME required_vars
		then
		    /usr/bin/sed -i "/${CNTL_CASE_NAME}/d" required_vars
		else
		    echo "ERROR: deleting ${CNTL_CASE_NAME} from required_vars failed"
		    echo "*** EXITING THE SCRIPT"
		    exit 1
		fi
		if /usr/bin/grep -q $CNTL_FIRST_YR_NAME required_vars
		then
		    /usr/bin/sed -i "/${CNTL_FIRST_YR_NAME}/d" required_vars
		else
		    echo "ERROR: deleting ${CNTL_FIRST_YR_NAME} from required_vars failed"
		    echo "*** EXITING THE SCRIPT"
		    exit 1
		fi
		if /usr/bin/grep -q $CNTL_NYRS_NAME required_vars
		then
		    /usr/bin/sed -i "/${CNTL_NYRS_NAME}/d" required_vars
		else
		    echo "ERROR: deleting ${CNTL_NYRS_NAME} from required_vars failed"
		    echo "*** EXITING THE SCRIPT"
		    exit 1
		fi
		if /usr/bin/grep -q $INPUT_DIR_NAME2 required_vars
		then
		    /usr/bin/sed -i "/${INPUT_DIR_NAME2}/d" required_vars
		else
		    echo "ERROR: deleting ${INPUT_DIR_NAME2} from required_vars failed"
		    echo "*** EXITING THE SCRIPT"
		    exit 1
		fi
	    fi
	fi
	
    	# CHANGE START YR OF TEST CASE IN DIAGNOSTICS SCRIPT
	if [ $SYR1 -ge 0 ]; then
	    echo "-CHANGING FIRST YR IN TEST CASE TO $SYR1 in $DIAG_FILE"
	    if /usr/bin/grep -q fyr_of_test $DIAG_FILE
	    then
    		/usr/bin/sed -i "s+fyr_of_test+${SYR1}+g" $DIAG_FILE
	    else
		echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new SYR1 failed"
		echo "*** EXITING THE SCRIPT"
		exit 1
	    fi
    	    echo "# START YEAR IN TEST CASE:" >> config.log
	    echo "${TEST_FIRST_YR_NAME} = $SYR1" >> config.log
	    if /usr/bin/grep -q $TEST_FIRST_YR_NAME required_vars
	    then
		/usr/bin/sed -i "/${TEST_FIRST_YR_NAME}/d" required_vars
	    else
		echo "ERROR: deleting ${TEST_FIRST_YR_NAME} from required_vars failed"
		echo "*** EXITING THE SCRIPT"
		exit 1
	    fi
	fi

   	# CHANGE END YR OF TEST CASE IN DIAGNOSTICS SCRIPT
	if [ $EYR1 -ge 0 ]; then
	    if [ $EYR1 -gt $SYR1 ]; then
		NYR1="$(($EYR1 - $SYR1 + 1))"
		echo "-CHANGING NUMBER OF YEARS IN TEST CASE to $NYR1 in $DIAG_FILE"
		if /usr/bin/grep -q nyr_of_test $DIAG_FILE
		then
    		    /usr/bin/sed -i "s+nyr_of_test+${NYR1}+g" $DIAG_FILE
		else
		    echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new NYR1 failed"
		    echo "*** EXITING THE SCRIPT"
		    exit 1
		fi
    		echo "# END YEAR IN TEST CASE:" >> config.log
		echo "${TEST_NYRS_NAME} = $NYR1" >> config.log
		if /usr/bin/grep -q $TEST_NYRS_NAME required_vars
		then
		    /usr/bin/sed -i "/${TEST_NYRS_NAME}/d" required_vars
		else
		    echo "ERROR: deleting ${TEST_NYRS_NAME} from required_vars failed"
		    echo "*** EXITING THE SCRIPT"
		    exit 1
		fi
	    else
		echo "WARNING: end_year in $CASE1 is smaller than start_year: please correct this in $DIAG_FILE."
		RUN_DIAG=0
		final_message="CANNOT RUN ${DIAG_FILE} (see previous warning(s))."
	    fi
	fi

	# CHANGE CASE2 IN DIAGNOSTICS SCRIPT
	if [ $CASE2 != none ]; then
      	    echo "-CHANGING CNTL CASE to $CASE2 in $DIAG_FILE"
	    EXPPATH=$HISTORY_PATH2/$CASE2
	    if [ ! -d "$EXPPATH" ]; then
		echo "WARNING: CASE=${CASE2} does not exist in ${HISTORY_PATH2}. Please modify the case name and/or path to history files in the diagnostic script."
		RUN_DIAG=0
		final_message="CANNOT RUN ${DIAG_FILE} (see previous warning(s))."
	    fi
	    if /usr/bin/grep -q your_cntl_simulation $DIAG_FILE
	    then
		/usr/bin/sed -i "s+your_cntl_simulation+${CASE2}+g" $DIAG_FILE
	    else
		echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_PATH/$DIAG_FILE with new CNTL CASE failed"
		echo "*** EXITING THE SCRIPT"
		exit 1
	    fi
    	    echo "# CONTROL SIMULATION NAME:" >> config.log
	    echo "${CNTL_CASE_NAME} = ${CASE2}" >> config.log
	    if /usr/bin/grep -q $CNTL_CASE_NAME required_vars
	    then
    		/usr/bin/sed -i "/${CNTL_CASE_NAME}/d" required_vars
	    else
		echo "ERROR: deleting ${CNTL_CASE_NAME} from required_vars failed"
		echo "*** EXITING THE SCRIPT"
		exit 1
	    fi
	    # SET CNTL=USER
	    echo "-CHANGING CNTL to USER in $DIAG_FILE"
	    if /usr/bin/grep -q type_of_control_case $DIAG_FILE
	    then
		/usr/bin/sed -i "s+type_of_control_case+USER+g" $DIAG_FILE
	    else
		echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_PATH/$DIAG_FILE with new type_of_control_case failed"
		echo "*** EXITING THE SCRIPT"
		exit 1
	    fi
    	    echo "# TYPE OF CONTROL CASE:" >> config.log
	    echo "${CNTL_NAME} = USER" >> config.log
	    if /usr/bin/grep -q $CNTL_NAME required_vars
	    then
		/usr/bin/sed -i "/${CNTL_NAME}/d" required_vars
	    else
		echo "ERROR: deleting ${CNTL_NAME} from required_vars failed"
		echo "*** EXITING THE SCRIPT"
		exit 1
	    fi
	fi

	# CHANGE START YR OF CNTL CASE IN DIAGNOSTICS SCRIPT
	if [ $SYR2 -ge 0 ]; then
    	    echo "-CHANGING FIRST YR IN CNTL CASE to $SYR2 in $DIAG_FILE"
	    if /usr/bin/grep -q fyr_of_cntl $DIAG_FILE
	    then
    		/usr/bin/sed -i "s+fyr_of_cntl+${SYR2}+g" $DIAG_FILE
	    else
		echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_PATH/$DIAG_FILE with new SYR2 failed"
		echo "*** EXITING THE SCRIPT"
		exit 1
	    fi
	    echo "# START YEAR IN CONTROL CASE:" >> config.log
	    echo "${CNTL_FIRST_YR_NAME} = $SYR2" >> config.log
	    if /usr/bin/grep -q $CNTL_FIRST_YR_NAME required_vars
	    then
		/usr/bin/sed -i "/${CNTL_FIRST_YR_NAME}/d" required_vars
	    else
		echo "ERROR: deleting ${CNTL_FIRST_YR_NAME} from required_vars failed"
		echo "*** EXITING THE SCRIPT"
		exit 1
	    fi
	fi

	# CHANGE END YR OF CNTL CASE IN DIAGNOSTICS SCRIPT
	if [ $EYR2 -ge 0 ]; then
	    if [ $EYR2 -gt $SYR2 ]; then
		NYR2="$(($EYR2 - $SYR2 + 1))"
		echo "-CHANGING NUMBER OF YEARS IN CNTL CASE to $NYR2 in $DIAG_FILE"
		if /usr/bin/grep -q nyr_of_cntl $DIAG_FILE
		then
    		    /usr/bin/sed -i "s+nyr_of_cntl+${NYR2}+g" $DIAG_FILE
		else
		    echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new NYR2 failed"
		    echo "*** EXITING THE SCRIPT"
		    exit 1
		fi
		echo "# END YEAR IN CONTROL CASE:" >> config.log
		echo "${CNTL_NYRS_NAME} = $NYR2" >> config.log
		if /usr/bin/grep -q $CNTL_NYRS_NAME required_vars
		then
		    /usr/bin/sed -i "/${CNTL_NYRS_NAME}/d" required_vars
		else
		    echo "ERROR: deleting ${CNTL_NYRS_NAME} from required_vars failed"
		    echo "*** EXITING THE SCRIPT"
		    exit 1
		fi
	    else
		echo "WARNING: end_year of $CASE2 is smaller than start_year: please correct this in $DIAG_FILE."
		RUN_DIAG=0
		final_message="CANNOT RUN ${DIAG_FILE} (see warning(s))."
	    fi
	fi

	# CHANGE TO CLIMO OR TIME SERIES DIAGNOSTICS
	if [ $TYPE_OF_DIAG != both ]; then
	    if [ $TYPE_OF_DIAG == climo ]; then
		echo "-MODIFYING $DIAG_FILE FOR CLIMATOLOGY DIAGNOSTICS"
		if /usr/bin/grep -q SWITCHED_OFF $DIAG_FILE
		then
    		    /usr/bin/sed -i "s/SWITCHED_OFF/ONLY_CLIMO/g" $DIAG_FILE
		else
		    echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new TYPE_OF_DIAG failed"
		    echo "*** EXITING THE SCRIPT"
		    exit 1
		fi
	    elif [ $TYPE_OF_DIAG == time_series ]; then
		echo "-MODIFYING $DIAG_FILE FOR TIME SERIES DIAGNOSTICS"
		if /usr/bin/grep -q SWITCHED_OFF $DIAG_FILE
		then
    		    /usr/bin/sed -i "s/SWITCHED_OFF/ONLY_TIME_SERIES/g" $DIAG_FILE
		else
		    echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new TYPE_OF_DIAG failed"
		    echo "*** EXITING THE SCRIPT"
		    exit 1
		fi
	    fi
	    echo "# TYPE OF DIAGNOSTICS:" >> config.log
	    echo "CLIMO_TIME_SERIES_SWITCH = $TYPE_OF_DIAG" >> config.log
	fi

	# CHECK IF RUN BY CRON
	if [ ! -z ${RUN_BY_CRON} ]; then
 	    echo "-RUN BY CRONTAB"
	    if /usr/bin/grep -q /usr/local/bin $DIAG_FILE
	    then
		/usr/bin/sed -i "s+/usr/local/bin+${BIN_DIR}/crontab+g" $DIAG_FILE
	    else
		echo "ERROR: modifying for RUN_BY_CRON in $DIAG_FILE failed"
		echo "*** EXITING THE SCRIPT"
		exit 1
	    fi
	fi
	
	# CHECK IF SCRIPT CAN BE EXECUTED
	if [ $RUN_DIAG -eq 1 ]; then
	    final_message="RUNNING ${DIAG_FILE} ..."
	    if [ $CASE1 == none ] || [ $SYR1 -lt 0 ] || [ $EYR1 -lt 0 ]; then
		RUN_DIAG=0
		final_message="${DIAG_FILE} IS NOT RUNNING: NOT ALL REQUIRED VARIABLES HAVE BEEN CONFIGURED (see ${DIAG_PATH}/config.log)."
	    else
		if [ $CASE2 != none ]; then
		    if [ $SYR2 -lt 0 ] || [ $EYR2 -lt 0 ]; then
			RUN_DIAG=0
			final_message="${DIAG_FILE} IS NOT RUNNING: NOT ALL REQUIRED VARIABLES HAVE BEEN CONFIGURED (see ${DIAG_PATH}/config.log)."
		    fi
		fi
	    fi
	fi

	# REMOVE WHITE SPACES FROM required_vars AND CHECK IF FILE IS EMPTY
	sed -i '/^\s*$/d' required_vars
	if [ -s required_vars ]; then
	    
	    if /usr/bin/grep -Fxq "$CNTL_CASE_NAME" required_vars
	    then
		/usr/bin/sed -i "/$CNTL_CASE_NAME/a\ (only if CNTL==USER)" required_vars
	    fi

	    if /usr/bin/grep -Fxq "$CNTL_FIRST_YR_NAME" required_vars
	    then
		/usr/bin/sed -i "/$CNTL_FIRST_YR_NAME/a\ (only if CNTL==USER)" required_vars
	    fi
	
	    if /usr/bin/grep -Fxq "$CNTL_NYRS_NAME" required_vars
	    then
		/usr/bin/sed -i "/$CNTL_NYRS_NAME/a\ (only if CNTL==USER)" required_vars
	    fi

	    if /usr/bin/grep -Fxq "$INPUT_DIR_NAME2" required_vars
	    then
		/usr/bin/sed -i "/$INPUT_DIR_NAME2/a\ (only if CNTL==USER)" required_vars
	    fi

	    echo " " >> config.log
	    echo "At the very least, the following variables in ${DIAG_FILE} must be configured prior to running the script:" >> config.log
	    echo "------------------------------------------------" >> config.log
	    /usr/bin/cat required_vars >> config.log
	fi
    	echo " " >> config.log
	echo "------------------------------------------------" >> config.log
	echo "END: config.log" >> config.log

	/usr/bin/rm required_vars
	/usr/bin/chmod 755 $DIAG_FILE
	echo "$MODEL_CAPS DIAGNOSTICS SUCCESSFULLY CONFIGURED in $DIAG_PATH/$MODEL_DIAG_CAPS"
	echo "-------------------------------------------------"
	echo $final_message
	echo "-------------------------------------------------"
	if [ $RUN_DIAG -eq 1 ]; then
	    ./${DIAG_FILE}
	fi
	cd $BIN_DIR

	# SAVE TIME INFORMATION FOR EACH COMPONENT
	diag_end_time=`date +%s`
        runtime_s=`expr ${diag_end_time} - ${diag_start_time}`
	let runtime_s_tot+=$runtime_s
        runtime_m_comp=`expr ${runtime_s} / 60`
        min_in_secs=`expr ${runtime_m_comp} \* 60`
        runtime_s_comp=`expr ${runtime_s} - ${min_in_secs}`
	DIAG_RUNTIMES[icount]=${runtime_m_comp}m${runtime_s_comp}s
    fi    
    let icount=icount+1
done

# SAVE TIME INFORMATION FOR TOTAL RUNTIME
runtime_m_all=`expr ${runtime_s_tot} / 60`
min_in_secs=`expr ${runtime_m_all} \* 60`
runtime_s_all=`expr ${runtime_s_tot} - ${min_in_secs}`
DIAG_TOT_RUNTIME=${runtime_m_all}m${runtime_s_all}s

# PRINT RUNTIME INFORMATION
echo "-------------------------------------------------"
echo "TOTAL ${THIS_SCRIPT_NAME} RUNTIME: ${DIAG_TOT_RUNTIME}"
icount=0
for runtime in "${DIAG_RUNTIMES[@]}"
do
    if [ $runtime != null ]; then
	echo "-${MODELS_CAPS[icount]} diagnostics: ${runtime}"
    fi
    let icount=icount+1
done
echo "-------------------------------------------------"
cdate=`date`
echo "DONE: ${cdate}"
