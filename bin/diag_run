#!/bin/bash
#
# DESCRIPTION: Wrapper script for NorESM diagnostics

VERSION=2.1
BIN_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
ROOT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )"
ETC_DIR=$ROOT_DIR/etc
ROOT_FOLD=$(basename $ROOT_DIR)

## Initial values
THIS_SCRIPT_NAME=`basename "$0"`
DIAG_PATH=$ROOT_DIR/out/$USER
USER_MODEL=none
CASE1=none
SYR1=-1
EYR1=-1
CASE2=none
SYR2=-1
EYR2=-1
if [ -d /projects/NS2345K/noresm/cases ]; then
    WEB_PATH=/projects/NS2345K/www/diagnostics/noresm/$USER
    HISTORY_PATH1=/projects/NS2345K/noresm/cases
    HISTORY_PATH2=/projects/NS2345K/noresm/cases
else
    echo "NO default input and out path set"
    #echo "*** EXIT ***"
    #exit 1
fi

RUN_DIAG=1
TYPE_OF_DIAG=both
RUN_ATM_CLM=1

## Welcome message
echo "-------------------------------------------------"
echo "Program:"
echo "${BIN_DIR}/${THIS_SCRIPT_NAME}"
echo "Version: $VERSION"
echo "-------------------------------------------------"

## Check all flags
if [ $# -eq 0 ] || [ $1 == "-h" ]; then
    echo "Short description:"
    echo "A wrapper script for NorESM diagnostic packages."
    echo " "
    echo "Basic usage:"
    echo "${THIS_SCRIPT_NAME} -m [model] -c [test case name] -s [test case start yr] -e [test case end yr] # Run model-obs diagnostics"
    echo "${THIS_SCRIPT_NAME} -m [model] -c [test case name] -s [test case start yr] -e [test case end yr] -c2 [cntl case name] -s2 [cntl case start yr] -e2 [cntl case end yr] # Run model1-model2 diagnostics"
    echo "nohup ${BIN_DIR}/${THIS_SCRIPT_NAME} -m [model] -c [test case name] -s [test case start yr] -e [test case end yr] &> out & # Run model-obs diagnostics in the background with nohup"
    echo " "
    echo "Command-line options:"
    echo "-m, --model=MODEL                             Specify the diagnostics package (REQUIRED)."
    echo "                                              Valid arguments:"
    echo "                                                cam    : atmospheric package (AMWG)"
    echo "                                                clm    : land package (LMWG)"
    echo "                                                cice   : sea-ice package"
    echo "                                                cism   : land-ice package"
    echo "                                                blom   : ocean package"
    echo "                                                hamocc : biogeochemistry package"
    echo "                                                all    : configure all available packages."
    echo "-c, -c1, --case=CASE1, --case1=CASE1          Test case simulation (OPTIONAL)."
    echo "-s, -s1, --start_yr=SYR1, --start_yr1=SYR1    Start year of test case climatology (OPTIONAL)."
    echo "-e, -e1, --end_yr=EYR1, --end_yr1=EYR1        End year of test case climatology (OPTIONAL)."
    echo "-c2, --case2=CASE2                            Control case simulation (OPTIONAL)."
    echo "-s2, --start_yr2=SYR2                         Start year of control case climatology (OPTIONAL)."
    echo "-e2, --end_yr2=EYR2                           End year of control case climatology (OPTIONAL)."
    echo "-i, -i1, --input-dir=DIR, --input-dir1=DIR    Specify the directory where the test case history files are located (OPTIONAL)."
    echo "                                              Default is --input-dir=$HISTORY_PATH1"
    echo "-i2, --input-dir2=DIR                         Specify the directory where the control case history files are located (OPTIONAL)."
    echo "                                              Default is --input-dir=$HISTORY_PATH2"
    echo "-o, --output-dir=DIR                          Specify the directory where the package(s) the climatology and time-series files should be stored (OPTIONAL)."
    echo "                                              Default is --output-dir=$DIAG_PATH"
    echo "-p, --passive-mode                            Run the script in passive mode: the diagnostic script will be configured but not executed (OPTIONAL)."
    echo "-t, --type=TYPE                               Specify climatology or time series diagnostics (OPTIONAL): valid options are --type=climo and --type=time_series."
    echo "                                              Default is to run both. Note that the time series are computed over the entire simulation."
    echo "-w, --web-dir=DIR                             Specify the directory where the html should be published (OPTIONAL)."
    echo "                                              Default is --web-dir=$WEB_PATH"
    echo "--no-atm                                      Run CLM diagnostics without CAM data. Must be used for offline CLM simulations."
    echo " "
    echo "Examples:"
    echo "${THIS_SCRIPT_NAME} -m all -c N1850_f19_tn11_exp1 -s 21 -e 50 # model-obs diagnostics of case=N1850_f19_tn11_exp1 (climatology between yrs 21 and 50) for all model components."
    echo "${THIS_SCRIPT_NAME} -m cam -c N1850_f19_tn11_exp1 -s 21 -e 50 -w /path/to/my/html # model-obs diagnostics in CAM, publish the html in /path/to/my/html."
    echo "${THIS_SCRIPT_NAME} -m blom -c N1850_f19_tn11_exp1 -t time_series # model-obs time-series diagnostics in BLOM for all years represented in the model output directory (${HISTORY_PATH1}/N1850_f19_tn11_exp1/ocn/hist/)."
    echo "${THIS_SCRIPT_NAME} -m cice -c N1850_f19_tn11_exp1 -s 21 -e 50 -p # configure (but do not run) model-obs diagnostics for CICE."
    echo "${THIS_SCRIPT_NAME} -m clm -c N1850_f19_tn11_exp1 -s 21 -e 50 -i /input/directory1 -c2 N1850_f19_tn11_exp2 -s2 21 -e2 50 -i2 /input/directory2 # model1-model2 diagnostics for CLM with user-specified history file directories"
    echo "${THIS_SCRIPT_NAME} -m cism -c N1850_f19_tn11_exp1 -s 21 -e 50 -i /input/directory1 -c2 N1850_f19_tn11_exp2 -s2 21 -e2 50 -i2 /input/directory2 # model1-model2 diagnostics for CISM with user-specified history file directories"
    echo "${THIS_SCRIPT_NAME} -m blom -c N1850_f19_tn11_exp1 -s 21 -e 50 -t climo # model-obs climatology diagnostics (no time series) for BLOM:"
    echo "${THIS_SCRIPT_NAME} -m cam -o /my/dir # install CAM diagnostics in /my/dir with minimal configuration."
    echo "${THIS_SCRIPT_NAME} -m blom,hamocc -c N1850OC_f19_tn11_exp1 -s 21 -e 50 # model-obs diagnostics for BLOM and HAMOCC."
    echo "${THIS_SCRIPT_NAME} -m clm -c N1850_f19_tn11_clmexp1 -s 71 -e 100 --no-atm # model-obs time-series diagnostics for an offline (uncoupled) CLM simulation."
    echo "${THIS_SCRIPT_NAME} -m hamocc -c N1850OC_f19_tn11_exp1 -s 31 -e 100 -t time_series # model-obs time-series diagnostics in HAMOCC between yrs 31 and 100."
    echo " "
    echo "*** NOTE: '-m micom' should be used for the ocean component of NorESM version 1 ***"
    echo " "
    exit 0
else
    while test $# -gt 0; do
        case "$1" in
            -c | -c1)
                shift
                if test $# -gt 0; then
                    CASE1=$1
                else
                    echo "ERROR: no test case specified (-c, -c1, --case, --case1)"
                    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                shift
                ;;
            --case=* | --case1=*)
                CASE1=`echo $1 | sed -e 's/^[^=]*=//g'`
                shift
                ;;
            -c2)
                shift
                if test $# -gt 0; then
                    CASE2=$1
                else
                    echo "ERROR: no cntl case specified (-c2, --case2)"
                    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                shift
                ;;
            --case2=*)
                CASE2=`echo $1 | sed -e 's/^[^=]*=//g'`
                shift
                ;;
            -s | -s1)
                shift
                if test $# -gt 0; then
                    SYR1=$1
                else
                    echo "ERROR: no start yr of test case specified (-s, -s1, --start_yr, --start_yr1)"
                    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                shift
                ;;
            --start_yr=* | --start_yr1=*)
                SYR1=`echo $1 | sed -e 's/^[^=]*=//g'`
                shift
                ;;
            -s2)
                shift
                if test $# -gt 0; then
                    SYR2=$1
                else
                    echo "ERROR: no start yr of cntl case specified (-s2, --start_yr2)"
                    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                shift
                ;;
            --start_yr2=*)
                SYR2=`echo $1 | sed -e 's/^[^=]*=//g'`
                shift
                ;;
            -e | -e1)
                shift
                if test $# -gt 0; then
                    EYR1=$1
                else
                    echo "ERROR: no end yr of test case specified (-e, -e1, --end_yr, --end_yr1)"
                    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                shift
                ;;
            --end_yr=* | --end_yr1=*)
                EYR1=`echo $1 | sed -e 's/^[^=]*=//g'`
                shift
                ;;
            -e2)
                shift
                if test $# -gt 0; then
                    EYR2=$1
                else
                    echo "ERROR: no end yr of cntl case specified (-e2, --end_yr2)"
                    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                shift
                ;;
            --end_yr2=*)
                EYR2=`echo $1 | sed -e 's/^[^=]*=//g'`
                shift
                ;;
            -i | -i1)
                shift
                if test $# -gt 0; then
                    HISTORY_PATH1=$1
                else
                    echo "ERROR: no input directory specified (-i, --input-dir)"
                    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                shift
                ;;
            --input-dir* | --input-dir1*)
                HISTORY_PATH1=`echo $1 | sed -e 's/^[^=]*=//g'`
                shift
                ;;
                -i2)
                shift
                if test $# -gt 0; then
                    HISTORY_PATH2=$1
                else
                    echo "ERROR: no input directory specified (-i2, --input-dir2)"
                    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                shift
                ;;
            --input-dir2*)
                HISTORY_PATH2=`echo $1 | sed -e 's/^[^=]*=//g'`
                shift
                ;;
            -m)
                shift
                if test $# -gt 0; then
                    USER_MODEL=$1
                else
                    echo "ERROR: no model specified (-m, --model)"
                         echo "Valid options: cam, blom/micom, clm, cice, cism, all"
                    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                shift
                ;;
            --model*)
                USER_MODEL=`echo $1 | sed -e 's/^[^=]*=//g'`
                shift
                ;;
            --no-atm)
                RUN_ATM_CLM=0
                shift
                ;;
            -p|--passive-mode)
                RUN_DIAG=0
                final_message="RUNNING IN PASSIVE MODE: EXITING"
                shift
                ;;
            -o)
                shift
                if test $# -gt 0; then
                    DIAG_PATH=$1
                else
                    echo "ERROR: no output directory specified (-o, --output-dir)"
                        echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                shift
                ;;
            --output-dir*)
                DIAG_PATH=`echo $1 | sed -e 's/^[^=]*=//g'`
                shift
                ;;
            -t)
                shift
                if test $# -gt 0; then
                    TYPE_OF_DIAG=$1
                else
                    echo "ERROR: no type specified (-t, --type)"
                         echo "Valid options: climo and time_series"
                    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                shift
                ;;
            --type*)
                TYPE_OF_DIAG=`echo $1 | sed -e 's/^[^=]*=//g'`
                shift
                ;;
            -w)
                shift
                if test $# -gt 0; then
                    WEB_PATH=$1
                else
                    echo "ERROR: no web directory specified (-w, --web-dir)"
                        echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                shift
                ;;
            --web-dir*)
                WEB_PATH=`echo $1 | sed -e 's/^[^=]*=//g'`
                shift
                ;;
            *)
                echo "ERROR: option $1 not allowed."
                echo "Run $BIN_DIR/$THIS_SCRIPT_NAME to see available options"
                echo "*** EXITING THE SCRIPT"
                exit 1
                ;;
        esac
    done
fi

# remove the leading zeros
SYR1=$((10#$SYR1))
EYR1=$((10#$EYR1))
SYR2=$((10#$SYR2))
EYR2=$((10#$EYR2))

# SECURITY CHECKS
if [[ ${DIAG_PATH:0:1} != "/" ]]; then
    echo "ERROR: ${DIAG_PATH} is not a directory. Please give the full path."
    echo "*** EXITING THE SCRIPT"
    exit 1
fi

if [ $TYPE_OF_DIAG != both ] && [ $TYPE_OF_DIAG != climo ] && [ $TYPE_OF_DIAG != time_series ]; then
    echo "ERROR: ${TYPE_OF_DIAG} is not an option for flag -t. Valid options are climo and time_series."
    echo "*** EXITING THE SCRIPT"
    exit 1
fi

if [ $TYPE_OF_DIAG == time_series ] && [ $CASE1 == $CASE2 ]; then
    echo "ERROR: --type=${TYPE_OF_DIAG} cannot be used if case1=case2."
    echo "*** EXITING THE SCRIPT"
    exit 1
fi

# CREATE DATE_STAMP
dateYYYYMMDD=`date +%y%m%d`
dateHHMMSS=`date +%H%M%S`

# DEFINE VARIABLES
CAM_DIAG_DIR=${ROOT_DIR}/packages/CAM_DIAG
CLM_DIAG_DIR=${ROOT_DIR}/packages/CLM_DIAG
CICE_DIAG_DIR=${ROOT_DIR}/packages/CICE_DIAG
BLOM_DIAG_DIR=${ROOT_DIR}/packages/BLOM_DIAG
HAMOCC_DIAG_DIR=${ROOT_DIR}/packages/HAMOCC_DIAG
CISM_DIAG_DIR=${ROOT_DIR}/packages/CISM_DIAG
CAM_DIAG_FILE=amwg_template.csh
CLM_DIAG_FILE=lnd_template.csh
CICE_DIAG_FILE=ice_diag_template.csh
BLOM_DIAG_FILE=blom_diag_template.sh
HAMOCC_DIAG_FILE=hamocc_diag_template.sh
CISM_DIAG_FILE=cism_diag_template.sh
CAM_FILE_OUT=amwg_${dateYYYYMMDD}_${dateHHMMSS}.csh
CLM_FILE_OUT=lnd_${dateYYYYMMDD}_${dateHHMMSS}.csh
CICE_FILE_OUT=ice_diag_${dateYYYYMMDD}_${dateHHMMSS}.csh
BLOM_FILE_OUT=blom_diag_${dateYYYYMMDD}_${dateHHMMSS}.sh
HAMOCC_FILE_OUT=hamocc_diag_${dateYYYYMMDD}_${dateHHMMSS}.sh
CISM_FILE_OUT=cism_diag_${dateYYYYMMDD}_${dateHHMMSS}.sh

MODELS=(cam clm cice blom hamocc cism)
MODELS_CAPS=(CAM CLM CICE BLOM HAMOCC CISM)
DIAG_DIRS=($CAM_DIAG_DIR $CLM_DIAG_DIR $CICE_DIAG_DIR $BLOM_DIAG_DIR $HAMOCC_DIAG_DIR $CISM_DIAG_DIR)
DIAG_FILES=($CAM_DIAG_FILE $CLM_DIAG_FILE $CICE_DIAG_FILE $BLOM_DIAG_FILE $HAMOCC_DIAG_FILE $CISM_DIAG_FILE)
DIAG_FILES_OUT=($CAM_FILE_OUT $CLM_FILE_OUT $CICE_FILE_OUT $BLOM_FILE_OUT $HAMOCC_FILE_OUT $CISM_FILE_OUT )
TEST_CASE_NAMES=(test_casename caseid_1 CASE_TO_CONT CASENAME1 CASENAME1 CASENAME1 )
TEST_FIRST_YR_NAMES=(test_first_yr clim_first_yr_1 FIRST_YR_CLIMO1 FIRST_YR_CLIMO1 FIRST_YR_CLIMO1 FIRST_YR_CLIMO1)
TEST_NYRS_NAMES=(test_nyrs clim_num_yrs_1 NYRS_CLIMO1 NYRS_CLIMO1 NYRS_CLIMO1 NYRS_CLIMO1)
TEST_FIRST_YR_TS_NAMES=(test_first_yr_ts trends_first_yr_1 FIRST_YR_TS1 FIRST_YR_TS1 FIRST_YR_TS1 FIRST_YR_TS1)
TEST_LAST_YR_TS_NAMES=(test_last_yr_ts trends_num_yrs_1 LAST_YR_TS1 LAST_YR_TS1 LAST_YR_TS1 LAST_YR_TS1)
DIAG_DIR_NAMES=(diag_dir PTMPDIR SCRIPT_HOME DIAG_ROOT DIAG_ROOT DIAG_ROOT)
CNTL_NAMES=(CNTL CNTL CNTL CNTL CNTL CNTL)
CNTL_CASE_NAMES=(cntl_casename caseid_2 CASE_TO_DIFF CASENAME2 CASENAME2 CASENAME2)
CNTL_FIRST_YR_NAMES=(cntl_first_yr clim_first_yr_2 FIRST_YR_CLIMO2 FIRST_YR_CLIMO2 FIRST_YR_CLIMO2 FIRST_YR_CLIMO2)
CNTL_NYRS_NAMES=(cntl_nyrs clim_num_yrs_2 NYRS_CLIMO2 NYRS_CLIMO2 NYRS_CLIMO2 NYRS_CLIMO2)
CNTL_FIRST_YR_TS_NAMES=(cntl_first_yr_ts trends_first_yr_2 FIRST_YR_TS2 FIRST_YR_TS2 FIRST_YR_TS2 FIRST_YR_TS2)
CNTL_LAST_YR_TS_NAMES=(cntl_last_yr_ts trends_num_yrs_2 LAST_YR_TS2 LAST_YR_TS2 LAST_YR_TS2 LAST_YR_TS2)
WEB_DIR_NAMES=(publish_html_root publish_html_root publish_html_root publish_html_root publish_html_root publish_html_root)
INPUT_DIR_NAMES1=(test_path_history_root SOURCE_1 DATA_ROOT1 pathdat_root1 pathdat_root1 pathdat_root1)
INPUT_DIR_NAMES2=(cntl_path_history_root SOURCE_2 DATA_ROOT2 pathdat_root2 pathdat_root2 pathdat_root2)
DIAG_RUNTIMES=(null null null null null null)
TRENDS_ALL_NAMES=(TRENDS_ALL trends_all_flag TRENDS_ALL TRENDS_ALL TRENDS_ALL TRENDS_ALL)
runtime_s_tot=0

# DETERMINE WHICH PACKAGE TO RUN
if [ "$USER_MODEL" == "all" ]; then
    RUN_MODELS=(1 1 1 1 1 1)
else
    USER_MODEL_SPACE=`echo $USER_MODEL | sed 's/,/ /g'`
    RUN_MODELS=(0 0 0 0 0 0)
    for model in $USER_MODEL_SPACE
    do
        if [ "$model" == "cam" ] || [ "$model" == "cam2" ]; then
            let RUN_MODELS[0]=${RUN_MODELS[0]}+1
        elif [ "$model" == "clm" ] || [ "$model" == "clm2" ]; then
            let RUN_MODELS[1]=${RUN_MODELS[1]}+1
        elif [ "$model" == "cice" ]; then
            let RUN_MODELS[2]=${RUN_MODELS[2]}+1
        elif [ "$model" == "blom" ] || [ "$model" == "micom" ]; then
            let RUN_MODELS[3]=${RUN_MODELS[3]}+1
        elif [ "$model" == "hamocc" ]; then
            let RUN_MODELS[4]=${RUN_MODELS[4]}+1
        elif [ "$model" == "cism" ]; then
            let RUN_MODELS[5]=${RUN_MODELS[5]}+1
        fi
    done
fi

if [ $RUN_ATM_CLM -eq 0 ] && [ ${RUN_MODELS[1]} -eq 0 ]; then
    echo "IGNORING flag --no-atm: can only be in combination with -m clm,all"
fi

# SECURITY CHECKS
all_zeros=1
icount=0
for model_flag in "${RUN_MODELS[@]}"
do
    if [ $model_flag -gt 0 ]; then
        all_zeros=0
        if [ $model_flag -gt 1 ]; then
            RUN_MODELS[$icount]=1
        fi
    fi
    let icount++
done

if [ $all_zeros -eq 1 ]; then
    echo "ERROR: please specify a model (-m cam,clm,cice,blom,hamocc or -m all):"
    echo "*** EXITING THE SCRIPT"
    exit 1
fi

icount=0
for model_flag in "${RUN_MODELS[@]}"
do
    if [ $model_flag -gt 0 ]; then

        # START TIMER
        diag_start_time=`date +%s`
        
        # READ ARRAYS
        MODEL=${MODELS[icount]}
        MODEL_CAPS=${MODELS_CAPS[icount]}
        DIAG_DIR=${DIAG_DIRS[icount]}
        DIAG_FILE=${DIAG_FILES[icount]}
        DIAG_FILE_OUT=${DIAG_FILES_OUT[icount]}
        MODEL_DIAG_CAPS=${MODEL_CAPS}_DIAG
        TEST_CASE_NAME=${TEST_CASE_NAMES[icount]}
        TEST_FIRST_YR_NAME=${TEST_FIRST_YR_NAMES[icount]}
        TEST_NYRS_NAME=${TEST_NYRS_NAMES[icount]}
        TEST_FIRST_YR_TS_NAME=${TEST_FIRST_YR_TS_NAMES[icount]}
        TEST_LAST_YR_TS_NAME=${TEST_LAST_YR_TS_NAMES[icount]}
        DIAG_DIR_NAME=${DIAG_DIR_NAMES[icount]}
        CNTL_NAME=${CNTL_NAMES[icount]}
        CNTL_CASE_NAME=${CNTL_CASE_NAMES[icount]}
        CNTL_FIRST_YR_NAME=${CNTL_FIRST_YR_NAMES[icount]}
        CNTL_NYRS_NAME=${CNTL_NYRS_NAMES[icount]}
        CNTL_FIRST_YR_TS_NAME=${CNTL_FIRST_YR_TS_NAMES[icount]}
        CNTL_LAST_YR_TS_NAME=${CNTL_LAST_YR_TS_NAMES[icount]}
        WEB_DIR_NAME=${WEB_DIR_NAMES[icount]}
        INPUT_DIR_NAME1=${INPUT_DIR_NAMES1[icount]}
        INPUT_DIR_NAME2=${INPUT_DIR_NAMES2[icount]}
        TRENDS_ALL_NAME=${TRENDS_ALL_NAMES[icount]}
                
        # CREATE USER DIAGNOSTICS DIRECTORY
        if [ ! -d $DIAG_PATH/$MODEL_DIAG_CAPS ]; then
            /usr/bin/mkdir -p $DIAG_PATH/$MODEL_DIAG_CAPS
            if [ $? -ne 0 ]; then
                echo "ERROR: creating directory ${DIAG_PATH}/${MODEL_DIAG_CAPS} failed"
                echo "*** EXITING THE SCRIPT"
                exit 1
            fi
        fi

        # COPY THE DIAGNOSTICS SCRIPT
        cp $DIAG_DIR/$DIAG_FILE $DIAG_PATH/$MODEL_DIAG_CAPS
        if [ $? -ne 0 ]; then
            echo "ERROR: copying $DIAG_DIR/$DIAG_FILE failed"
            echo "*** EXITING THE SCRIPT"
            exit 1
        fi

        # COPY config.log AND required_vars
        cp $ETC_DIR/config_log_template $DIAG_PATH/$MODEL_DIAG_CAPS/config.log
        if [ $? -ne 0 ]; then
            echo "ERROR: copying $ETC_DIR/config_log_template failed"
            echo "*** EXITING THE SCRIPT"
            exit 1
        fi
        if [ $TYPE_OF_DIAG == time_series ]; then
            cp $ETC_DIR/required_vars_${MODEL_CAPS}_ts $DIAG_PATH/$MODEL_DIAG_CAPS/required_vars
            if [ $? -ne 0 ]; then
                echo "ERROR: copying $ETC_DIR/required_vars_${MODEL_CAPS}_ts failed"
                echo "*** EXITING THE SCRIPT"
                exit 1
            fi
        else
            cp $ETC_DIR/required_vars_${MODEL_CAPS} $DIAG_PATH/$MODEL_DIAG_CAPS/required_vars
            if [ $? -ne 0 ]; then
                echo "ERROR: copying $ETC_DIR/required_vars_${MODEL_CAPS} failed"
                echo "*** EXITING THE SCRIPT"
                exit 1
            fi
        fi
        # ENTER THE DIAGNOSTICS DIRECTORY
        cd $DIAG_PATH/$MODEL_DIAG_CAPS
        if [ $? -ne 0 ]; then
            echo "ERROR: could not access $DIAG_PATH/$MODEL_DIAG_CAPS"
            echo "*** EXITING THE SCRIPT"
            exit 1
        fi
        
        # MODIFY config.log WITH NAMES AND DATES
        cdate=`date`
        if /usr/bin/grep -q MODEL_DIAG config.log
        then
             /usr/bin/sed -i "s/MODEL_DIAG/${MODEL_DIAG_CAPS}/g" config.log
        else
            echo "ERROR: modifying $DIAG_PATH/config.log with $MODEL_DIAG_CAPS failed"
            echo "*** EXITING THE SCRIPT"
            exit 1
        fi
        if /usr/bin/grep -q diag_script config.log
        then
            /usr/bin/sed -i "s/diag_script/${DIAG_FILE}/g" config.log
        else
            echo "ERROR: modifying $DIAG_PATH/config.log with ${DIAG_FILE} failed"
            echo "*** EXITING THE SCRIPT"
            exit 1
        fi

        if /usr/bin/grep -q current_date config.log
        then
            /usr/bin/sed -i "s/current_date/${cdate}/g" config.log
        else
            echo "ERROR: modifying $DIAG_PATH/config.log with date failed"
            echo "*** EXITING THE SCRIPT"
            exit 1
        fi
        if /usr/bin/grep -q script_name_path config.log
        then
            /usr/bin/sed -i "s+script_name_path+${BIN_DIR}/${THIS_SCRIPT_NAME}+g" config.log
        else
            echo "ERROR: modifying $DIAG_PATH/config.log with script_name failed"
            echo "*** EXITING THE SCRIPT"
            exit 1
        fi
        if /usr/bin/grep -q script_name config.log
        then
            /usr/bin/sed -i "s/script_name/${THIS_SCRIPT_NAME}/g" config.log
        else
            echo "ERROR: modifying $DIAG_PATH/config.log with date failed"
            echo "*** EXITING THE SCRIPT"
            exit 1
        fi
        
        # CHANGE THE DIAG DIRECTORY IN DIAGNOSTICS SCRIPT
        echo "-CHANGING DIAGNOSTICS DIRECTORY to ${DIAG_PATH}/${MODEL_DIAG_CAPS} in $DIAG_FILE"
        if /usr/bin/grep -q /path/to/your/diagnostics $DIAG_FILE
        then
            /usr/bin/sed -i "s+/path/to/your/diagnostics+${DIAG_PATH}/${MODEL_DIAG_CAPS}+g" $DIAG_FILE
        else
            echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new DIAG_PATH failed"
            echo "*** EXITING THE SCRIPT"
            exit 1
        fi
        echo "# DIAGNOSTICS DIRECTORY:" >> config.log
        echo "${DIAG_DIR_NAME} = ${DIAG_PATH}/${MODEL_DIAG_CAPS}" >> config.log
        if /usr/bin/grep -q $DIAG_DIR_NAME required_vars
        then
            /usr/bin/sed -i "/${DIAG_DIR_NAME}/d" required_vars
        else
            echo "ERROR: deleting $DIAG_DIR_NAME from required_vars failed"
            echo "*** EXITING THE SCRIPT"
            exit 1
        fi
        
        # CHANGE THE ROOT DIRECTORY INCLUDING ALL CODE AND DATA
        echo "-CHANGING ROOT DIRECTORY FOR CODE AND DATA to ${DIAG_DIR} in $DIAG_FILE"
        if /usr/bin/grep -q /path/to/code/and/data $DIAG_FILE
        then
            /usr/bin/sed -i "s+/path/to/code/and/data+${DIAG_DIR}+g" $DIAG_FILE
        else
            echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new DIAG_DIR failed"
            echo "*** EXITING THE SCRIPT"
            exit 1
        fi
        echo "# ROOT DIRECTORY TO CODE AND DATA:" >> config.log
        echo "DIAG_HOME = ${DIAG_DIR}" >> config.log
        if /usr/bin/grep -q DIAG_HOME required_vars
        then
            /usr/bin/sed -i "/DIAG_HOME/d" required_vars
        else
            echo "ERROR: deleting DIAG_HOME from required_vars failed"
            echo "*** EXITING THE SCRIPT"
            exit 1
        fi

        # CHANGE INPUT DIRECTORY 1
        echo "-CHANGING INPUT DIR 1 to $HISTORY_PATH1 in $DIAG_FILE"
        if /usr/bin/grep -q /path/to/test_case/history $DIAG_FILE
        then
                /usr/bin/sed -i "s+/path/to/test_case/history+${HISTORY_PATH1}+g" $DIAG_FILE
        else
            echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_PATH/$DIAG_FILE with new HISTORY_PATH1 failed"
            echo "*** EXITING THE SCRIPT"
            exit 1
        fi
        echo "# TEST CASE SIMULATION DIRECTORY:" >> config.log
        echo "${INPUT_DIR_NAME1} = $HISTORY_PATH1" >> config.log
        if /usr/bin/grep -q $INPUT_DIR_NAME1 required_vars
        then
            /usr/bin/sed -i "/${INPUT_DIR_NAME1}/d" required_vars
        else
            echo "ERROR: deleting ${INPUT_DIR_NAME1} from required_vars failed"
            echo "*** EXITING THE SCRIPT"
            exit 1
        fi

        # CHANGE INPUT DIRECTORY 2
        if [ $CASE2 != none ]; then
                echo "-CHANGING INPUT DIR 2 to $HISTORY_PATH2 in $DIAG_FILE"
            if /usr/bin/grep -q /path/to/cntl_case/history $DIAG_FILE
            then
                    /usr/bin/sed -i "s+/path/to/cntl_case/history+${HISTORY_PATH2}+g" $DIAG_FILE
            else
                echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_PATH/$DIAG_FILE with new HISTORY_PATH2 failed"
                echo "*** EXITING THE SCRIPT"
                exit 1
            fi
            echo "# CONTROL CASE SIMULATION DIRECTORY:" >> config.log
            echo "${INPUT_DIR_NAME2} = $HISTORY_PATH2" >> config.log
            if /usr/bin/grep -q $INPUT_DIR_NAME2 required_vars
            then
                /usr/bin/sed -i "/${INPUT_DIR_NAME2}/d" required_vars
            else
                echo "ERROR: deleting ${INPUT_DIR_NAME2} from required_vars failed"
                echo "*** EXITING THE SCRIPT"
                exit 1
            fi
        fi

        # CHANGE WEB DIR IN DIAGNOSTICS SCRIPT
        echo "-CHANGING publish_html_root to $WEB_PATH in $DIAG_FILE"
        if /usr/bin/grep -q /path/to/html/directory $DIAG_FILE
        then
                /usr/bin/sed -i "s+/path/to/html/directory+${WEB_PATH}+g" $DIAG_FILE
        else
            echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new WEB_PATH failed"
            echo "*** EXITING THE SCRIPT"
            exit 1
        fi
        echo "# HTML DIRECTORY:" >> config.log
        echo "${WEB_DIR_NAME} = $WEB_PATH" >> config.log
        if /usr/bin/grep -q $WEB_DIR_NAME required_vars
        then
            /usr/bin/sed -i "/${WEB_DIR_NAME}/d" required_vars
        else
            echo "ERROR: deleting ${WEB_DIR_NAME} from required_vars failed"
            echo "*** EXITING THE SCRIPT"
            exit 1
        fi
        
        # CHANGE CASE1 IN DIAGNOSTICS SCRIPT
           if [ $CASE1 != none ]; then
                  echo "-CHANGING TEST CASE to $CASE1 in $DIAG_FILE"
            EXPPATH=$HISTORY_PATH1/$CASE1
            if [ ! -d "$EXPPATH" ]; then
                echo "WARNING: CASE=${CASE1} does not exist in ${HISTORY_PATH1}. Please modify the case name and/or path to history files in the diagnostic script."
                RUN_DIAG=0
                final_message="CANNOT RUN ${DIAG_FILE} (see previous warning(s))."
            fi
            if /usr/bin/grep -q your_test_simulation $DIAG_FILE
            then
                /usr/bin/sed -i "s+your_test_simulation+${CASE1}+g" $DIAG_FILE
            else
                echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new TEST CASE failed"
                echo "*** EXITING THE SCRIPT"
                exit 1
            fi
            echo "# TEST SIMULATION NAME:" >> config.log
            echo "${TEST_CASE_NAME} = ${CASE1}" >> config.log
            if /usr/bin/grep -q $TEST_CASE_NAME required_vars
            then
                /usr/bin/sed -i "/${TEST_CASE_NAME}/d" required_vars
            else
                echo "ERROR: deleting ${TEST_CASE_NAME} from required_vars failed"
                echo "*** EXITING THE SCRIPT"
                exit 1
            fi
            # SET CNTL=OBS IF CASE2 IS NOT PROVIDED
            if [ $CASE2 == none ]; then
                echo "-CHANGING CNTL TO OBS in $DIAG_FILE"
                if /usr/bin/grep -q type_of_control_case $DIAG_FILE
                then
                    /usr/bin/sed -i "s+type_of_control_case+OBS+g" $DIAG_FILE
                else
                    echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new type_of_control_case failed"
                    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                echo "# TYPE OF CONTROL CASE:" >> config.log
                echo "${CNTL_NAME} = OBS" >> config.log
                if /usr/bin/grep -q $CNTL_NAME required_vars
                then
                    /usr/bin/sed -i "/${CNTL_NAME}/d" required_vars
                else
                    echo "ERROR: deleting ${CNTL_NAME} from required_vars failed"
                    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                if /usr/bin/grep -q $CNTL_CASE_NAME required_vars
                then
                    /usr/bin/sed -i "/${CNTL_CASE_NAME}/d" required_vars
                else
                    echo "ERROR: deleting ${CNTL_CASE_NAME} from required_vars failed"
                    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                if [ $TYPE_OF_DIAG != time_series ]; then
                    if /usr/bin/grep -q $CNTL_FIRST_YR_NAME required_vars
                    then
                        /usr/bin/sed -i "/${CNTL_FIRST_YR_NAME}/d" required_vars
                    else
                        echo "ERROR: deleting ${CNTL_FIRST_YR_NAME} from required_vars failed"
                        echo "*** EXITING THE SCRIPT"
                        exit 1
                    fi
                    if /usr/bin/grep -q $CNTL_NYRS_NAME required_vars
                    then
                        /usr/bin/sed -i "/${CNTL_NYRS_NAME}/d" required_vars
                    else
                        echo "ERROR: deleting ${CNTL_NYRS_NAME} from required_vars failed"
                        echo "*** EXITING THE SCRIPT"
                        exit 1
                    fi
                fi
                if /usr/bin/grep -q $INPUT_DIR_NAME2 required_vars
                then
                    /usr/bin/sed -i "/${INPUT_DIR_NAME2}/d" required_vars
                else
                    echo "ERROR: deleting ${INPUT_DIR_NAME2} from required_vars failed"
                    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
            fi
        fi
        
            # CHANGE START YR OF TEST CASE IN DIAGNOSTICS SCRIPT
        if [ $SYR1 -ge 0 ]; then
            if [ $TYPE_OF_DIAG == time_series ]; then
                echo "-CHANGING FIRST TS YR IN TEST CASE TO $SYR1 in $DIAG_FILE"
                if /usr/bin/grep -q fyr_of_ts_test $DIAG_FILE
                then
                        /usr/bin/sed -i "s+fyr_of_ts_test+${SYR1}+g" $DIAG_FILE
                else
                    echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new SYR1 failed"
                    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                echo "# TIME-SERIES START YEAR IN TEST CASE:" >> config.log
                echo "${TEST_FIRST_YR_TS_NAME} = $SYR1" >> config.log
            else
                echo "-CHANGING FIRST CLIMO YR IN TEST CASE TO $SYR1 in $DIAG_FILE"
                if /usr/bin/grep -q fyr_of_test $DIAG_FILE
                then
                        /usr/bin/sed -i "s+fyr_of_test+${SYR1}+g" $DIAG_FILE
                else
                    echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new SYR1 failed"
                    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                    echo "# CLIMO START YEAR IN TEST CASE:" >> config.log
                echo "${TEST_FIRST_YR_NAME} = $SYR1" >> config.log
                if /usr/bin/grep -q $TEST_FIRST_YR_NAME required_vars
                then
                    /usr/bin/sed -i "/${TEST_FIRST_YR_NAME}/d" required_vars
                else
                    echo "ERROR: deleting ${TEST_FIRST_YR_NAME} from required_vars failed"
                    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
            fi
        fi

           # CHANGE END YR OF TEST CASE IN DIAGNOSTICS SCRIPT
        if [ $EYR1 -ge 0 ]; then
            if [ $EYR1 -gt $SYR1 ]; then
                if [ $TYPE_OF_DIAG == time_series ]; then
                    if [ $MODEL == clm ]; then
                        NYR1="$(($EYR1 - $SYR1 + 1))"
                        echo "-CHANGING TS NUM YRS IN TEST CASE to $NYR1 in $DIAG_FILE"
                        if /usr/bin/grep -q nyrs_of_ts_test $DIAG_FILE
                        then
                                /usr/bin/sed -i "s+nyrs_of_ts_test+${NYR1}+g" $DIAG_FILE
                        else
                            echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new NYR1 failed"
                            echo "*** EXITING THE SCRIPT"
                            exit 1
                        fi
                            echo "# TIME-SERIES NUM YEARS IN TEST CASE:" >> config.log
                        echo "${TEST_LAST_YR_TS_NAME} = $NYR1" >> config.log
                    else
                        echo "-CHANGING LAST TS YR IN TEST CASE to $EYR1 in $DIAG_FILE"
                        if /usr/bin/grep -q lyr_of_ts_test $DIAG_FILE
                        then
                                /usr/bin/sed -i "s+lyr_of_ts_test+${EYR1}+g" $DIAG_FILE
                        else
                            echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new EYR1 failed"
                            echo "*** EXITING THE SCRIPT"
                            exit 1
                        fi
                            echo "# TIME-SERIES END YEAR IN TEST CASE:" >> config.log
                        echo "${TEST_LAST_YR_TS_NAME} = $EYR1" >> config.log
                    fi
                else
                    NYR1="$(($EYR1 - $SYR1 + 1))"
                    echo "-CHANGING NUMBER OF CLIMO YEARS IN TEST CASE to $NYR1 in $DIAG_FILE"
                    if /usr/bin/grep -q nyr_of_test $DIAG_FILE
                    then
                            /usr/bin/sed -i "s+nyr_of_test+${NYR1}+g" $DIAG_FILE
                    else
                        echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new NYR1 failed"
                        echo "*** EXITING THE SCRIPT"
                        exit 1
                    fi
                        echo "# CLIMO END YEAR IN TEST CASE:" >> config.log
                    echo "${TEST_NYRS_NAME} = $NYR1" >> config.log
                    if /usr/bin/grep -q $TEST_NYRS_NAME required_vars
                    then
                        /usr/bin/sed -i "/${TEST_NYRS_NAME}/d" required_vars
                    else
                        echo "ERROR: deleting ${TEST_NYRS_NAME} from required_vars failed"
                        echo "*** EXITING THE SCRIPT"
                        exit 1
                    fi
                fi
            else
                echo "WARNING: end_year in $CASE1 is smaller than start_year: please correct this in $DIAG_FILE."
                RUN_DIAG=0
                final_message="CANNOT RUN ${DIAG_FILE} (see previous warning(s))."
            fi
        fi

        # CHANGE CASE2 IN DIAGNOSTICS SCRIPT
        if [ $CASE2 != none ]; then
                  echo "-CHANGING CNTL CASE to $CASE2 in $DIAG_FILE"
            EXPPATH=$HISTORY_PATH2/$CASE2
            if [ ! -d "$EXPPATH" ]; then
                echo "WARNING: CASE=${CASE2} does not exist in ${HISTORY_PATH2}. Please modify the case name and/or path to history files in the diagnostic script."
                RUN_DIAG=0
                final_message="CANNOT RUN ${DIAG_FILE} (see previous warning(s))."
            fi
            if /usr/bin/grep -q your_cntl_simulation $DIAG_FILE
            then
                /usr/bin/sed -i "s+your_cntl_simulation+${CASE2}+g" $DIAG_FILE
            else
                echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_PATH/$DIAG_FILE with new CNTL CASE failed"
                echo "*** EXITING THE SCRIPT"
                exit 1
            fi
                echo "# CONTROL SIMULATION NAME:" >> config.log
            echo "${CNTL_CASE_NAME} = ${CASE2}" >> config.log
            if /usr/bin/grep -q $CNTL_CASE_NAME required_vars
            then
                    /usr/bin/sed -i "/${CNTL_CASE_NAME}/d" required_vars
            else
                echo "ERROR: deleting ${CNTL_CASE_NAME} from required_vars failed"
                echo "*** EXITING THE SCRIPT"
                exit 1
            fi
            # SET CNTL=USER
            echo "-CHANGING CNTL to USER in $DIAG_FILE"
            if /usr/bin/grep -q type_of_control_case $DIAG_FILE
            then
                /usr/bin/sed -i "s+type_of_control_case+USER+g" $DIAG_FILE
            else
                echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_PATH/$DIAG_FILE with new type_of_control_case failed"
                echo "*** EXITING THE SCRIPT"
                exit 1
            fi
                echo "# TYPE OF CONTROL CASE:" >> config.log
            echo "${CNTL_NAME} = USER" >> config.log
            if /usr/bin/grep -q $CNTL_NAME required_vars
            then
                /usr/bin/sed -i "/${CNTL_NAME}/d" required_vars
            else
                echo "ERROR: deleting ${CNTL_NAME} from required_vars failed"
                echo "*** EXITING THE SCRIPT"
                exit 1
            fi
        fi

        # CHANGE START YR OF CNTL CASE IN DIAGNOSTICS SCRIPT
        if [ $SYR2 -ge 0 ]; then
            if [ $TYPE_OF_DIAG == time_series ]; then
                echo "-CHANGING FIRST TS YR IN CNTL CASE to $SYR2 in $DIAG_FILE"
                if /usr/bin/grep -q fyr_of_ts_cntl $DIAG_FILE
                then
                        /usr/bin/sed -i "s+fyr_of_ts_cntl+${SYR2}+g" $DIAG_FILE
                else
                    echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_PATH/$DIAG_FILE with new SYR2 failed"
                    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                echo "# TIME-SERIES START YEAR IN CONTROL CASE:" >> config.log
                echo "${CNTL_FIRST_YR_TS_NAME} = $SYR2" >> config.log
            else
                    echo "-CHANGING FIRST CLIMO YR IN CNTL CASE to $SYR2 in $DIAG_FILE"
                if /usr/bin/grep -q fyr_of_cntl $DIAG_FILE
                then
                        /usr/bin/sed -i "s+fyr_of_cntl+${SYR2}+g" $DIAG_FILE
                else
                    echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_PATH/$DIAG_FILE with new SYR2 failed"
                    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
                echo "# CLIMO START YEAR IN CONTROL CASE:" >> config.log
                echo "${CNTL_FIRST_YR_NAME} = $SYR2" >> config.log
                if /usr/bin/grep -q $CNTL_FIRST_YR_NAME required_vars
                then
                    /usr/bin/sed -i "/${CNTL_FIRST_YR_NAME}/d" required_vars
                else
                    echo "ERROR: deleting ${CNTL_FIRST_YR_NAME} from required_vars failed"
                    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
            fi
        fi

        # CHANGE END YR OF CNTL CASE IN DIAGNOSTICS SCRIPT
        if [ $EYR2 -ge 0 ]; then
            if [ $EYR2 -gt $SYR2 ]; then
                if [ $TYPE_OF_DIAG == time_series ]; then
                    if [ $MODEL == clm ]; then
                        NYR2="$(($EYR2 - $SYR2 + 1))"
                        echo "-CHANGING NUM TS YRS IN CNTL CASE to $NYR2 in $DIAG_FILE"
                        if /usr/bin/grep -q nyrs_of_ts_cntl $DIAG_FILE
                        then
                                /usr/bin/sed -i "s+nyrs_of_ts_cntl+${NYR2}+g" $DIAG_FILE
                        else
                            echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new NYR2 failed"
                            echo "*** EXITING THE SCRIPT"
                            exit 1
                        fi
                        echo "# TIME-SERIES NUM YEARS IN CONTROL CASE:" >> config.log
                        echo "${CNTL_LAST_YR_TS_NAME} = $NYR2" >> config.log
                    else
                        echo "-CHANGING LAST TS YR IN CNTL CASE to $EYR2 in $DIAG_FILE"
                        if /usr/bin/grep -q lyr_of_ts_cntl $DIAG_FILE
                        then
                                /usr/bin/sed -i "s+lyr_of_ts_cntl+${EYR2}+g" $DIAG_FILE
                        else
                            echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new EYR2 failed"
                            echo "*** EXITING THE SCRIPT"
                            exit 1
                        fi
                        echo "# TIME-SERIES END YEAR IN CONTROL CASE:" >> config.log
                        echo "${CNTL_LAST_YR_TS_NAME} = $EYR2" >> config.log
                    fi
                else
                    NYR2="$(($EYR2 - $SYR2 + 1))"
                    echo "-CHANGING NUMBER OF CLIMO YEARS IN CNTL CASE to $NYR2 in $DIAG_FILE"
                    if /usr/bin/grep -q nyr_of_cntl $DIAG_FILE
                    then
                            /usr/bin/sed -i "s+nyr_of_cntl+${NYR2}+g" $DIAG_FILE
                    else
                        echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new NYR2 failed"
                        echo "*** EXITING THE SCRIPT"
                        exit 1
                    fi
                    echo "# CLIMO END YEAR IN CONTROL CASE:" >> config.log
                    echo "${CNTL_NYRS_NAME} = $NYR2" >> config.log
                    if /usr/bin/grep -q $CNTL_NYRS_NAME required_vars
                    then
                        /usr/bin/sed -i "/${CNTL_NYRS_NAME}/d" required_vars
                    else
                        echo "ERROR: deleting ${CNTL_NYRS_NAME} from required_vars failed"
                        echo "*** EXITING THE SCRIPT"
                        exit 1
                    fi
                fi
            else
                echo "WARNING: end_year of $CASE2 is smaller than start_year: please correct this in $DIAG_FILE."
                RUN_DIAG=0
                final_message="CANNOT RUN ${DIAG_FILE} (see warning(s))."
            fi
        fi

        # CHANGE TO CLIMO OR TIME SERIES DIAGNOSTICS
        if [ $TYPE_OF_DIAG != both ]; then
            if [ $TYPE_OF_DIAG == climo ]; then
                echo "-MODIFYING $DIAG_FILE FOR CLIMATOLOGY DIAGNOSTICS"
                if /usr/bin/grep -q SWITCHED_OFF $DIAG_FILE
                then
                        /usr/bin/sed -i "s/SWITCHED_OFF/ONLY_CLIMO/g" $DIAG_FILE
                else
                    echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new TYPE_OF_DIAG failed"
                    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
            elif [ $TYPE_OF_DIAG == time_series ]; then
                echo "-MODIFYING $DIAG_FILE FOR TIME SERIES DIAGNOSTICS"
                if /usr/bin/grep -q SWITCHED_OFF $DIAG_FILE
                then
                        /usr/bin/sed -i "s/SWITCHED_OFF/ONLY_TIME_SERIES/g" $DIAG_FILE
                else
                    echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new TYPE_OF_DIAG failed"
                    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
            fi
            echo "# TYPE OF DIAGNOSTICS:" >> config.log
            echo "CLIMO_TIME_SERIES_SWITCH = $TYPE_OF_DIAG" >> config.log
        fi

        # CHANGE ATMOSPHERIC DIAGNOSTICS IN CLM
        if [ $MODEL == clm ]; then
            if [ $RUN_ATM_CLM -eq 0 ]; then
                echo "-REMOVING ATM DIAGNOSTICS FROM CLM"
                if /usr/bin/grep -q ATM_DIAG $DIAG_FILE
                then
                        /usr/bin/sed -i "s/ATM_DIAG/0/g" $DIAG_FILE
                else
                    echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new RUN_ATM_CLM failed"
                    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
            else
                if /usr/bin/grep -q ATM_DIAG $DIAG_FILE
                then
                        /usr/bin/sed -i "s/ATM_DIAG/1/g" $DIAG_FILE
                else
                    echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new RUN_ATM_CLM failed"
                    echo "*** EXITING THE SCRIPT"
                    exit 1
                fi
            fi
            echo "# ATM DIAGNOSTICS:" >> config.log
            echo "set_4 = ${RUN_ATM_CLM}" >> config.log
        fi

        # CHANGE SWITCH FOR TIME SERIES DIAGNOSITCS
        if [ $TYPE_OF_DIAG == time_series ] && [ $SYR1 -ge 0 ] && [ $EYR1 -ge 0 ]; then
            echo "-SETTING UP TIME-SERIES DIAGNOSTICS WITHIN TIME LIMITS"
            if /usr/bin/grep -q ts_all_switch $DIAG_FILE
            then
                    /usr/bin/sed -i "s/ts_all_switch/0/g" $DIAG_FILE
            else
                echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new ts_all_switch failed"
                echo "*** EXITING THE SCRIPT"
                exit 1
            fi
            echo "# TRENDS_ALL FLAG:" >> config.log
            echo "${TRENDS_ALL_NAME} = 0" >> config.log
        else
            echo "-SETTING UP TIME-SERIES DIAGNOSTICS FOR ENTIRE EXPERIMENT"
            if /usr/bin/grep -q ts_all_switch $DIAG_FILE
            then
                    /usr/bin/sed -i "s/ts_all_switch/1/g" $DIAG_FILE
            else
                echo "ERROR: modifying $DIAG_PATH/$MODEL_DIAG_CAPS/$DIAG_FILE with new ts_all_switch failed"
                echo "*** EXITING THE SCRIPT"
                exit 1
            fi
            echo "# TRENDS_ALL FLAG:" >> config.log
            echo "${TRENDS_ALL_NAME} = 1" >> config.log
        fi
        
        # CHECK IF SCRIPT CAN BE EXECUTED
        if [ $RUN_DIAG -eq 1 ]; then
            final_message="RUNNING ${DIAG_FILE} ..."
            if [ $TYPE_OF_DIAG == time_series ]; then
                if [ $CASE1 == none ]; then
                    RUN_DIAG=0
                    final_message="${DIAG_FILE} IS NOT RUNNING: NOT ALL REQUIRED VARIABLES HAVE BEEN CONFIGURED (see ${DIAG_PATH}/${MODEL_DIAG_CAPS}/config.log)."
                fi
            else
                if [ $CASE1 == none ] || [ $SYR1 -lt 0 ] || [ $EYR1 -lt 0 ]; then
                    RUN_DIAG=0
                    final_message="${DIAG_FILE} IS NOT RUNNING: NOT ALL REQUIRED VARIABLES HAVE BEEN CONFIGURED (see ${DIAG_PATH}/${MODEL_DIAG_CAPS}/config.log)."
                else
                    if [ $CASE2 != none ]; then
                        if [ $SYR2 -lt 0 ] || [ $EYR2 -lt 0 ]; then
                            RUN_DIAG=0
                            final_message="${DIAG_FILE} IS NOT RUNNING: NOT ALL REQUIRED VARIABLES HAVE BEEN CONFIGURED (see ${DIAG_PATH}/${MODEL_DIAG_CAPS}/config.log)."
                        fi
                    fi
                fi
            fi
        fi

        # REMOVE WHITE SPACES FROM required_vars AND CHECK IF FILE IS EMPTY
        sed -i '/^\s*$/d' required_vars
        if [ -s required_vars ]; then
            
            if /usr/bin/grep -Fxq "$CNTL_CASE_NAME" required_vars
            then
                /usr/bin/sed -i "/$CNTL_CASE_NAME/a\ (only if CNTL==USER)" required_vars
            fi

            if /usr/bin/grep -Fxq "$CNTL_FIRST_YR_NAME" required_vars
            then
                /usr/bin/sed -i "/$CNTL_FIRST_YR_NAME/a\ (only if CNTL==USER)" required_vars
            fi
        
            if /usr/bin/grep -Fxq "$CNTL_NYRS_NAME" required_vars
            then
                /usr/bin/sed -i "/$CNTL_NYRS_NAME/a\ (only if CNTL==USER)" required_vars
            fi

            if /usr/bin/grep -Fxq "$INPUT_DIR_NAME2" required_vars
            then
                /usr/bin/sed -i "/$INPUT_DIR_NAME2/a\ (only if CNTL==USER)" required_vars
            fi

            echo " " >> config.log
            echo "At the very least, the following variables in ${DIAG_FILE} must be configured prior to running the script:" >> config.log
            echo "------------------------------------------------" >> config.log
            /usr/bin/cat required_vars >> config.log
        fi
            echo " " >> config.log
        echo "------------------------------------------------" >> config.log
        echo "END: config.log" >> config.log

        /usr/bin/rm required_vars
        /usr/bin/chmod 755 $DIAG_FILE
        echo "$MODEL_CAPS DIAGNOSTICS SUCCESSFULLY CONFIGURED in $DIAG_PATH/$MODEL_DIAG_CAPS"
        echo "-------------------------------------------------"
        echo $final_message
        echo "-------------------------------------------------"
        if [ $RUN_DIAG -eq 1 ]; then
            /usr/bin/mv $DIAG_FILE $DIAG_FILE_OUT
            /usr/bin/mv config.log config_${dateYYYYMMDD}_${dateHHMMSS}.log
            ./$DIAG_FILE_OUT $@ | /usr/bin/tee out_${dateYYYYMMDD}_${dateHHMMSS}.log
            echo "Standard output and errors are saved in $DIAG_PATH/$MODEL_DIAG_CAPS/config/$CASE1/logs/out_${dateYYYYMMDD}_${dateHHMMSS}.log"
            if [ ! -d ./config/$CASE1/run_scripts ]; then
                /usr/bin/mkdir -p ./config/$CASE1/run_scripts
            fi
            if [ ! -d ./config/$CASE1/logs ]; then
                /usr/bin/mkdir -p ./config/$CASE1/logs
            fi
            /usr/bin/mv $DIAG_FILE_OUT ./config/$CASE1/run_scripts
            /usr/bin/mv config_${dateYYYYMMDD}_${dateHHMMSS}.log ./config/$CASE1/logs
            /usr/bin/mv out_${dateYYYYMMDD}_${dateHHMMSS}.log ./config/$CASE1/logs
        fi
        
        cd $BIN_DIR

        # SAVE TIME INFORMATION FOR EACH COMPONENT
        diag_end_time=`date +%s`
        runtime_s=`expr ${diag_end_time} - ${diag_start_time}`
        let runtime_s_tot+=$runtime_s
        runtime_m_comp=`expr ${runtime_s} / 60`
        min_in_secs=`expr ${runtime_m_comp} \* 60`
        runtime_s_comp=`expr ${runtime_s} - ${min_in_secs}`
        DIAG_RUNTIMES[icount]=${runtime_m_comp}m${runtime_s_comp}s
    fi    
    let icount=icount+1
done

# SAVE TIME INFORMATION FOR TOTAL RUNTIME
runtime_m_all=`expr ${runtime_s_tot} / 60`
min_in_secs=`expr ${runtime_m_all} \* 60`
runtime_s_all=`expr ${runtime_s_tot} - ${min_in_secs}`
DIAG_TOT_RUNTIME=${runtime_m_all}m${runtime_s_all}s

# PRINT RUNTIME INFORMATION
echo "-------------------------------------------------"
echo "TOTAL ${THIS_SCRIPT_NAME} RUNTIME: ${DIAG_TOT_RUNTIME}"
icount=0
for runtime in "${DIAG_RUNTIMES[@]}"
do
    if [ $runtime != null ]; then
        echo "-${MODELS_CAPS[icount]} diagnostics: ${runtime}"
    fi
    let icount=icount+1
done
echo "-------------------------------------------------"
cdate=`date`
echo "DONE: ${cdate}"
